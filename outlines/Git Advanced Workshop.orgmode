Git Advanced

Many Git workshops successfully focus on the basics for those new to DVCS. However, with Git having a full 5 years on the street now, there is a growing desire to address the maturing users of this innovative DVCS. This workshop will take existing Git users and bring them to a heightened level of productivity by leveraging Git’s powerful, yet underused “advanced” features.

https://github.com/matthewmccullough/git-workshop

* Studying team-collaboration techniques with Git.
** http://blog.springsource.com/2010/12/21/git-and-social-coding-how-to-merge-without-fear/
** https://github.com/blog/919-how-github-develops
** http://scottchacon.com/2011/08/31/github-flow.html
** http://nvie.com/posts/a-successful-git-branching-model/
** Branch per feature, but not as scary as it sounds
** Git's model
*** http://members.cox.net/junkio/git/MaintNotes.html
*** https://github.com/git/git
*** Branches
**** master
**** maint
**** next (graduation from pu)
**** pu (can be rebased)
**** html
**** man
*** Creating a parentless branch
**** git checkout --orphan

* Applying road-tested branching strategies.
** Pull requests on branches, not just commits
*** Leaves the PR open to enhancements, feedback, continued contributions
** Collapse branches quickly
*** Fine to delete branches once merged
*** Some teams prefer --no-ff on their merges
** Never commit to trunk
*** Possibly only accept pull requests
** Rebase branches
*** git config --local branch.autosetuprebase "always"
*** git pull --rebase
** Portable commits
*** Bundles
*** git bundle create master mymaster.bundle

* Cherry picking bug fixes and other nuggets of code in both linear and rebase workflows.
** Cherry pick from customer branch
*** Can be picked from anywhere
** Interactively rebase and edit on the desired commit
*** Amend that commit
*** Rebase continue

* Building custom commands via aliases and shell scripts.
** gc_recursive
** finddirtygit
** servehere
*** git daemon --export-all --base-path=. --enable=receive-pack

* Undoing and redoing almost anything via revert, reset, reflog and stash.
** Revert
** Reset
*** Soft
*** Hard

* Minimizing repetitive work with rerere, pickaxe, and bisect.
** Turn on rerere
*** Merge twice on the same information
*** git config --global rerere.enabled "1"
*** git rerere status
*** git rerere diff
** Logging
*** git log -S "STRING"
*** git log -G "regex"
*** git log --grep "<PATTERN>"
*** git log --follow FILENAME
*** git log --follow REF:FILENAME
*** git log -p -S "option = options[0];" --diff-filter=D
** Listing specifics
*** Untracked files:
*** git ls-files . --exclude-standard --others
*** Ignored files:
*** git ls-files . --ignored --exclude-standard --others

* Leveraging fixup, autosquash, squash and interactive rebase to fluidly make source history more comprehensible.
** Interactive Rebase
** Squash
** Fixup
** Aliases
*** Via Jacob Helwig
**** http://technosorcery.net/2010/02/07/fun_with_the_upcoming_1.7_release_of_git_rebase_--interactive_--autosquash.html
*** fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
*** squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
*** ri = rebase --interactive --autosquash
