Strange Loop Git Foundations

Distributed version control is all the rage these days, but is it worth it? It has been transformative for the dozens of organizations and thousands of developers that I’ve mentored on the unique implementation called Git. But don’t take my word for it. Discover the joy of a version control system that works for you, not against you, in a hands-on workshop. Bring a Windows, Mac, or Linux laptop and we’ll install, set up, use and bend Git into workflows that weren’t even possible with the version control systems of yesteryear. Be prepared to rethink how lightweight, fast, and refreshing source code control can be. After completing this workshop you’ll be able to do practical work with Git for your day job or weekend OSS hobby.

https://github.com/matthewmccullough/git-workshop

* What is Git?
** Why a distributed version control system?
** How does Git differ from previous VCS systems?

* Installing Git
** The 5 minute litmus test
** No systemic intrusions

* Day-to-day commands
* Three stage thinking
* Git under the hood: Hashes, DAGs and Treeish
* A code-and-commit workflow

* Creating local repositories.
** git init
** git add <FILENAME>
** git add <PATTERN>
** Adding code
*** Interactive checkin
**** git add -p
** Hello Git World repo:
*** https://matthewmccullough@github.com/matthewmccullough/hellogitworld.git
*** git://github.com/matthewmccullough/hellogitworld.git
*** git@github.com:matthewmccullough/hellogitworld.git

* Remotes
** Multiples
** Just bookmarks

* Branching in Git
** Cheap branches
** Managing branches
** Merging code
** Rebasing: A better merge

* Navigating the tree: diff, ls-tree and show
** Git exposes its internals
** Can discover the data structures

* Seeing Git as a content tracker (not just file tracker).
* Understanding Git network operations, including cloning, remotes, pushing & pulling.
** Deleting branches
* Branching for experiments, stories, and features.
* Merging branches, tags, and arbitrary hashes with recursive and fast-forward outcomes.
** git merge <branch>
** Which branches are merged?
** git branch --merged
** git branch --no-merged
* Rebasing for code change clarity, unification, and history linearity.
** Traditional rebase
*** git rebase <COMMIT>
** Interactive rebase
*** git rebase -i <COMMIT>




* Workflows
  * Offline sharing
  * Pushing and pulling
  * Commander, lieutenant and soldier
  * Centralized
* Tools
  * GUIs and IDEs
  * Web tools
  * Git hosting
